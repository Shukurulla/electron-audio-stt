class SystemAudioSTT {
  constructor() {
    this.mediaRecorder = null;
    this.audioContext = null;
    this.deepgramSocket = null;
    this.isRecording = false;
    this.mediaStream = null;
    this.processor = null;
    this.sources = [];
    this.allTranscripts = [];
    
    this.initializeElements();
    this.setupEventListeners();
    this.loadSources();
    this.testDeepgramConnection(); // Connection test qo'shamiz
  }

  initializeElements() {
    this.startBtn = document.getElementById('startBtn');
    this.stopBtn = document.getElementById('stopBtn');
    this.clearBtn = document.getElementById('clearBtn');
    this.copyBtn = document.getElementById('copyBtn');
    this.status = document.getElementById('status');
    this.indicator = document.getElementById('indicator');
    this.transcript = document.getElementById('transcript');
    this.wordCount = document.getElementById('wordCount');
    this.confidence = document.getElementById('confidence');
    this.language = document.getElementById('language');
  }

  setupEventListeners() {
    this.startBtn.addEventListener('click', () => this.startRecording());
    this.stopBtn.addEventListener('click', () => this.stopRecording());
    this.clearBtn.addEventListener('click', () => this.clearTranscript());
    this.copyBtn.addEventListener('click', () => this.copyTranscript());
  }

  // Deepgram connection test
  async testDeepgramConnection() {
    try {
      const apiKey = await window.electronAPI.getDeepgramKey();
      if (!apiKey || apiKey === 'your_deepgram_api_key_here') {
        this.updateStatus('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ', false);
        return false;
      }

      // Test HTTP connection first
      console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Deepgram...');
      
      // Simple connection test without WebSocket
      this.updateStatus('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω', false);
      return true;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      this.updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞', false);
      return false;
    }
  }

  async loadSources() {
    try {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞...');
      this.sources = await window.electronAPI.getSources();
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.sources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
      this.sources = [];
    }
  }

  async startRecording() {
    try {
      this.updateStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...', false);
      
      // Deepgram API key validation
      const apiKey = await window.electronAPI.getDeepgramKey();
      if (!apiKey || apiKey === 'your_deepgram_api_key_here') {
        throw new Error('API –∫–ª—é—á Deepgram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á.');
      }

      console.log('API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞:', apiKey.length);

      this.updateStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ...', false);
      this.clearTranscript();
      this.allTranscripts = [];

      // System audio capture
      await this.captureSystemAudio();
      
      this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram...', false);
      
      // Simplified Deepgram connection
      await this.connectToDeepgramSimple(apiKey);
      
      this.isRecording = true;
      this.startBtn.disabled = true;
      this.stopBtn.disabled = false;
      this.updateStatus('Ì¥¥ –ó–∞–ø–∏—Å—å...', true);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏:', error);
      this.updateStatus('‚ùå ' + error.message, false);
      this.resetButtons();
    }
  }

  async captureSystemAudio() {
    try {
      console.log('–ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ...');
      
      try {
        this.mediaStream = await navigator.mediaDevices.getDisplayMedia({
          video: true,
          audio: {
            echoCancellation: false,
            noiseSuppression: false,
            autoGainControl: false,
            sampleRate: 16000, // Back to standard rate for stability
            channelCount: 1
          }
        });
        
        console.log('‚úÖ getDisplayMedia —É—Å–ø–µ—à–Ω–æ');
        
        // Stop video track
        const videoTracks = this.mediaStream.getVideoTracks();
        videoTracks.forEach(track => track.stop());
        
      } catch (error1) {
        console.log('getDisplayMedia –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ Electron...');
        
        if (this.sources.length === 0) {
          await this.loadSources();
        }
        
        if (this.sources.length === 0) {
          throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞');
        }
        
        const screenSource = this.sources.find(s => 
          s.name.includes('Screen') || 
          s.name.includes('–≠–∫—Ä–∞–Ω') || 
          s.name.includes('Entire') ||
          s.name.includes('screen')
        ) || this.sources[0];
        
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫:', screenSource.name);
        
        const constraints = await window.electronAPI.getMediaConstraints(screenSource.id);
        if (!constraints) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
        }
        
        this.mediaStream = await navigator.mediaDevices.getUserMedia(constraints);
        console.log('‚úÖ –ó–∞—Ö–≤–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ Electron —É—Å–ø–µ—à–µ–Ω');
      }

      const audioTracks = this.mediaStream.getAudioTracks();
      if (audioTracks.length === 0) {
        throw new Error('–ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–∫—Ä–∞–Ω–∞ –≤–∫–ª—é—á–∏–ª–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∞—É–¥–∏–æ"');
      }

      console.log(`‚úÖ –ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏: ${audioTracks.length}`);

      // Simple audio context setup
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)({ 
        sampleRate: 16000 
      });
      
      const source = this.audioContext.createMediaStreamSource(this.mediaStream);
      
      // Simple processor
      this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);
      this.processor.onaudioprocess = (event) => {
        if (this.deepgramSocket && this.deepgramSocket.readyState === WebSocket.OPEN) {
          const audioData = event.inputBuffer.getChannelData(0);
          const int16Array = this.convertFloat32ToInt16(audioData);
          this.deepgramSocket.send(int16Array);
        }
      };

      source.connect(this.processor);
      this.processor.connect(this.audioContext.destination);
      
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞—É–¥–∏–æ: ' + error.message);
    }
  }

  // Simplified Deepgram connection
  async connectToDeepgramSimple(apiKey) {
    try {
      // Basic connection parameters
      const params = {
        encoding: 'linear16',
        sample_rate: '16000',
        channels: '1',
        interim_results: 'false',
        punctuate: 'true',
        smart_format: 'true',
        model: 'nova-2',
        language: 'ru'
      };
      
      const wsUrl = `wss://api.deepgram.com/v1/listen?${new URLSearchParams(params).toString()}`;
      
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram...');
      console.log('URL:', wsUrl.substring(0, 50) + '...');
      
      this.deepgramSocket = new WebSocket(wsUrl, ['token', apiKey]);
      
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          console.error('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Deepgram');
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Deepgram (15 —Å–µ–∫). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ API –∫–ª—é—á.'));
        }, 15000);

        this.deepgramSocket.onopen = () => {
          clearTimeout(timeout);
          console.log('‚úÖ WebSocket Deepgram –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          resolve();
        };

        this.deepgramSocket.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            this.handleTranscription(data);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Deepgram:', error);
          }
        };

        this.deepgramSocket.onerror = (error) => {
          clearTimeout(timeout);
          console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket Deepgram:', error);
          
          // More specific error messages
          let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Deepgram. ';
          
          if (apiKey.length < 20) {
            errorMessage += 'API –∫–ª—é—á –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π).';
          } else if (!navigator.onLine) {
            errorMessage += '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.';
          } else {
            errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
          }
          
          reject(new Error(errorMessage));
        };

        this.deepgramSocket.onclose = (event) => {
          clearTimeout(timeout);
          console.log('Ì¥å WebSocket Deepgram –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
          
          if (event.code === 1006) {
            console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
          } else if (event.code === 1002) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ WebSocket');
          } else if (event.code === 4008) {
            console.error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á');
          }
        };
      });
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
    }
  }

  handleTranscription(data) {
    try {
      if (data.channel?.alternatives?.length > 0 && data.is_final) {
        const transcript = data.channel.alternatives[0].transcript;
        const confidence = data.channel.alternatives[0].confidence;
        
        if (transcript?.trim()) {
          console.log('Ì≥ù Final transcript:', transcript, 'Confidence:', confidence);
          
          this.allTranscripts.push({
            text: transcript,
            confidence: confidence,
            timestamp: Date.now()
          });
          
          this.transcript.value += transcript + ' ';
          this.transcript.scrollTop = this.transcript.scrollHeight;
          this.updateWordCount();
          
          if (confidence !== undefined) {
            this.confidence.textContent = Math.round(confidence * 100) + '%';
          }
        }
      }
      
      if (data.error) {
        console.error('Deepgram error:', data.error);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error);
    }
  }

  convertFloat32ToInt16(float32Array) {
    const int16Array = new Int16Array(float32Array.length);
    for (let i = 0; i < float32Array.length; i++) {
      const sample = Math.max(-1, Math.min(1, float32Array[i]));
      int16Array[i] = sample * 32767;
    }
    return int16Array.buffer;
  }

  updateWordCount() {
    const words = this.transcript.value.trim().split(/\s+/).filter(word => word.length > 0);
    this.wordCount.textContent = words.length;
  }

  clearTranscript() {
    this.transcript.value = '';
    this.allTranscripts = [];
    this.wordCount.textContent = '0';
    this.confidence.textContent = '0%';
  }

  async copyTranscript() {
    try {
      const text = this.transcript.value.trim();
      await navigator.clipboard.writeText(text);
      
      const originalText = this.copyBtn.textContent;
      this.copyBtn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
      this.copyBtn.style.background = '#4CAF50';
      
      setTimeout(() => {
        this.copyBtn.textContent = originalText;
        this.copyBtn.style.background = '#667eea';
      }, 2000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞');
    }
  }

  stopRecording() {
    try {
      this.isRecording = false;
      
      if (this.deepgramSocket) {
        this.deepgramSocket.close();
        this.deepgramSocket = null;
      }
      
      if (this.processor) {
        this.processor.disconnect();
        this.processor = null;
      }
      
      if (this.mediaStream) {
        this.mediaStream.getTracks().forEach(track => track.stop());
        this.mediaStream = null;
      }
      
      if (this.audioContext) {
        this.audioContext.close();
        this.audioContext = null;
      }
      
      this.resetButtons();
      this.updateStatus('Ìªë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', false);
      
      if (this.allTranscripts.length > 0) {
        console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–µ–≥–º–µ–Ω—Ç–æ–≤: ${this.allTranscripts.length}`);
        console.log('–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:', this.calculateAverageConfidence() + '%');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏:', error);
      this.resetButtons();
      this.updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', false);
    }
  }

  calculateAverageConfidence() {
    if (this.allTranscripts.length === 0) return 0;
    const total = this.allTranscripts.reduce((sum, t) => sum + (t.confidence || 0), 0);
    return Math.round(total / this.allTranscripts.length * 100);
  }

  resetButtons() {
    this.startBtn.disabled = false;
    this.stopBtn.disabled = true;
  }

  updateStatus(message, isRecording) {
    this.status.textContent = message;
    this.indicator.classList.toggle('recording', isRecording);
  }
}

document.addEventListener('DOMContentLoaded', () => {
  try {
    if (typeof window.electronAPI === 'undefined') {
      console.error('‚ùå Electron API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      document.getElementById('status').textContent = '‚ùå Electron API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω';
      return;
    }
    
    console.log('Ì∫Ä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SystemAudioSTT...');
    new SystemAudioSTT();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    document.getElementById('status').textContent = '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
  }
});

window.addEventListener('error', (event) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', event.reason);
});
